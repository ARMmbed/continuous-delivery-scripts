trigger:
  - master

pr:
  - master

stages:
  - stage: AnalyseTest
    displayName: 'Analyse and Test'
    jobs:
      - job: Test
        strategy:
          maxParallel: 10
          matrix:
            Linux_Py_3_6:
              python.version: '3.6'
              vmImageName: ubuntu-18.04
              uploadCoverage: "false"

            Linux_Py_3_7:
              python.version: '3.7'
              vmImageName: ubuntu-18.04
              uploadCoverage: "true"

            Windows_Py_3_6:
              python.version: '3.6'
              vmImageName: windows-2019
              uploadCoverage: "false"

            Windows_Py_3_7:
              python.version: '3.7'
              vmImageName: windows-2019
              uploadCoverage: "false"

            macOS_Py_3_6:
              python.version: '3.6'
              vmImageName: macOS-10.14
              uploadCoverage: "false"

            macOS_Py_3_7:
              python.version: '3.7'
              vmImageName: macOS-10.14
              uploadCoverage: "false"
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - template: steps/install-development-dependencies.yml

          - script: |
              flake8
            displayName: 'Static Analysis - general (flake8)'

          - script: |
              mypy -p mbed_tools_ci
            displayName: 'Static Analysis - type checks (mypy)'

          - script: |
              pytest
            displayName: 'Run unit tests (pytest)'

          - script: |
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter format-coverage -t coverage.py -o coverage/codeclimate.json coverage/coverage.xml
              ./cc-test-reporter upload-coverage
            displayName: 'Upload test coverage to Code Climate'
            condition: and(succeeded(), eq(variables['uploadCoverage'], 'true'))
            env:
              CC_TEST_REPORTER_ID: $(CODECLIMATE_REPORTER_ID)
              GIT_BRANCH: $(Build.SourceBranchName)
              GIT_COMMIT: $(Build.SourceVersion)

  - stage: DocBuild
    displayName: 'Build Documentation'
    dependsOn: []
    jobs:
      - job: Docs
        displayName: 'Build Documentation'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.7'
            inputs:
              versionSpec: '3.7'

          - template: steps/install-development-dependencies.yml

          - bash: |
             echo "##vso[task.setvariable variable=temp_docs_path]`get-config --key DOCUMENTATION_PRODUCTION_OUTPUT_PATH`"
            displayName: 'Set variable for temporary docs dir'

          - script: |
              generate-docs --output_dir $(temp_docs_path)
            displayName: 'Generate documentation'

          - publish: $(temp_docs_path)
            artifact: Documentation
            displayName: 'Publish documentation'

  - stage: AssertNews
    displayName: 'Checks news files'
    dependsOn: []
    jobs:
      - job: News
        displayName: 'Assert news files'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.7'
            inputs:
              versionSpec: '3.7'

          - template: steps/determine-current-branch.yml

          - template: steps/install-development-dependencies.yml

          - script: |
              assert-news -b $(current_branch)
            displayName: 'Run check'

  - stage: BetaRelease
    displayName: 'Beta Release'
    # Only allow beta releases if the tests pass and we are on the beta branch.
    dependsOn:
      - AnalyseTest
      - AssertNews
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/beta'))
    jobs:
      - deployment: PyPIBetaRelease
        displayName: 'PyPI Beta Release'
        # The following environment has a manual approval step to gate releases.
        # This can only be created and configured within the Environment section of Pipelines.
        # The release can be approved from the Azure pipeline run.
        environment: 'PyPI Release'
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: 'ubuntu-latest'
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: '3.7'

                - template: steps/determine-current-branch.yml

                - template: steps/override-checkout.yml

                - template: steps/install-development-dependencies.yml

                - bash: tag-and-release -b $(current_branch) --release-type=beta
                  displayName: 'Beta Release'

  - stage: ProductionReleasePyPI
    displayName: 'Production Release'
    # Only allow production releases if the tests pass and we are on the master branch.
    dependsOn:
      - AnalyseTest
      - DocBuild
      - AssertNews
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
      - deployment: PyPIProductionRelease
        displayName: 'PyPI Production Release'
        # The following environment has a manual approval step to gate releases.
        # This can only be created and configured within the Environment section of Pipelines.
        # The release can be approved from the Azure pipeline run.
        environment: 'PyPI Release'
        strategy:
          runOnce:
            deploy:
              pool:
                vmImage: 'ubuntu-latest'
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: '3.7'

                - template: steps/determine-current-branch.yml

                - template: steps/override-checkout.yml

                - template: steps/install-development-dependencies.yml

                - bash: tag-and-release -b $(current_branch) --release-type=release
                  displayName: 'Production Release'
